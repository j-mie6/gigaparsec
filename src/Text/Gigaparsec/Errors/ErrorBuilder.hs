{-# LANGUAGE Safe #-}
{-# LANGUAGE TypeFamilies, AllowAmbiguousTypes, FlexibleInstances, FlexibleContexts #-}
{-|
Module      : Text.Gigaparsec.Errors.ErrorBuilder
Description : This typeclass specifies how to format an error from a parser as a specified type.
License     : BSD-3-Clause
Maintainer  : Jamie Willis, Gigaparsec Maintainers
Stability   : stable

This typeclass specifies how to format an error from a parser
as a specified type.

An instance of this typeclass is required when calling 'Text.Gigaparsec.parse'
(or similar). By default, @gigaparsec@ defines its own instance for
@ErrorBuilder String@ found in this module.

To implement @ErrorBuilder@, a number of methods must be defined,
as well the representation types for a variety of different components;
the relation between the various methods is closely linked
to the types that they both produce and consume. To only change
the basics of formatting without having to define the entire instance,
use the methods found in "Text.Gigaparsec.Errors.DefaultErrorBuilder".

= How an Error is Structured
There are two kinds of error messages that are generated by @gigaparsec@:
/Specialised/ and /Vanilla/. These are produced by different combinators
and can be merged with other errors of the same type if both errors appear
at the same offset. However, /Specialised/ errors will take precedence
over /Vanilla/ errors if they appear at the same offset. The most
common form of error is the /Vanilla/ variant, which is generated by
most combinators, except for some in "Text.Gigaparsec.Errors.Combinator".

Both types of error share some common structure, namely:

  - The error preamble, which has the file and the position.
  - The content lines, the specifics of which differ between the two types of error.
  - The context lines, which has the surrounding lines of input for contextualisation.

== /Vanilla/ Errors
There are three kinds of content line found in a /Vanilla/ error:

  1. Unexpected info: this contains information about the kind of token that caused the error.
  2. Expected info: this contains the information about what kinds of token could have avoided the error.
  3. Reasons: these are the bespoke reasons that an error has occurred (as generated by 'Text.Gigaparsec.Errors.Combinator.explain').

There can be at most one unexpected line, at most one expected line, and zero or more reasons.
Both of the unexpected and expected info are built up of /error items/, which are either:
the end of input, a named token, raw input taken from the parser definition. These can all be
formatted separately.

The overall structure of a /Vanilla/ error is given in the following diagram:

> ┌───────────────────────────────────────────────────────────────────────┐
> │   Vanilla Error                                                       │
> │                          ┌────────────────┐◄──────── position         │
> │                  source  │                │                           │
> │                     │    │   line      col│                           │
> │                     ▼    │     │         ││                           │
> │                  ┌─────┐ │     ▼         ▼│   end of input            │
> │               In foo.txt (line 1, column 5):       │                  │
> │                 ┌─────────────────────┐            │                  │
> │unexpected ─────►│                     │            │  ┌───── expected │
> │                 │          ┌──────────┐ ◄──────────┘  │               │
> │                 unexpected end of input               ▼               │
> │                 ┌──────────────────────────────────────┐              │
> │                 expected "(", "negate", digit, or letter              │
> │                          │    └──────┘  └───┘     └────┘ ◄────── named│
> │                          │       ▲        └──────────┘ │              │
> │                          │       │                     │              │
> │                          │      raw                    │              │
> │                          └─────────────────┬───────────┘              │
> │                 '-' is a binary operator   │                          │
> │                 └──────────────────────┘   │                          │
> │                ┌──────┐        ▲           │                          │
> │                │>3+4- │        │           expected items             │
> │                │     ^│        │                                      │
> │                └──────┘        └───────────────── reason              │
> │                   ▲                                                   │
> │                   │                                                   │
> │                   line info                                           │
> └───────────────────────────────────────────────────────────────────────┘


== /Specialised/ Errors
There is only one kind of content found in a /Specialised/ error:
a message. These are completely free-form, and are generated by the
'Text.Gigaparsec.Errors.Combinator.failWide' combinator, as well as its derived combinators.
There can be one or more messages in a /Specialised/ error.

The overall structure of a /Specialised/ error is given in the following diagram:

> ┌───────────────────────────────────────────────────────────────────────┐
> │   Specialised Error                                                   │
> │                          ┌────────────────┐◄──────── position         │
> │                  source  │                │                           │
> │                     │    │   line       col                           │
> │                     ▼    │     │         │                            │
> │                  ┌─────┐ │     ▼         ▼                            │
> │               In foo.txt (line 1, column 5):                          │
> │                                                                       │
> │           ┌───► something went wrong                                  │
> │           │                                                           │
> │ message ──┼───► it looks like a binary operator has no argument       │
> │           │                                                           │
> │           └───► '-' is a binary operator                              │
> │                ┌──────┐                                               │
> │                │>3+4- │                                               │
> │                │     ^│                                               │
> │                └──────┘                                               │
> │                   ▲                                                   │
> │                   │                                                   │
> │                   line info                                           │
> └───────────────────────────────────────────────────────────────────────┘

@since 0.2.0.0
-}
module Text.Gigaparsec.Errors.ErrorBuilder (ErrorBuilder(..)) where

import Text.Gigaparsec.Errors.Token (Token(Named, Raw))
import Text.Gigaparsec.Errors.DefaultErrorBuilder ( StringBuilder, formatDefault
                                                  , vanillaErrorDefault, specialisedErrorDefault
                                                  , rawDefault, namedDefault, endOfInputDefault
                                                  , expectedDefault, unexpectedDefault
                                                  , disjunct, combineMessagesDefault
                                                  , formatPosDefault, lineInfoDefault
                                                  )

import Data.Char (isSpace, generalCategory, ord, GeneralCategory(Format, Surrogate, PrivateUse, NotAssigned, Control))
import Data.Kind (Constraint)
import Data.List.NonEmpty (NonEmpty((:|)))
import Data.Set (Set)
import Data.Set qualified as Set (toList)
import Data.String (IsString(fromString))
import Numeric (showHex)

{-|
This class describes how to format an error message generated by a parser into
a form the parser writer desires.
-}
type ErrorBuilder :: * -> Constraint
class (Ord (Item err)) => ErrorBuilder err where
  {-|
  This is the top level function, which finally compiles all the formatted
  sub-parts into a finished value of type @err@.
  -}
  format :: Position err       -- ^ the representation of the position of the error in the input (see the 'pos' method).
         -> Source err         -- ^ the representation of the filename, if it exists (see the 'source' method).
         -> ErrorInfoLines err -- ^ the main body of the error message (see 'vanillaError' or 'specialisedError' methods).
         -> err                -- ^ the final error message

  -- | The representation type of position information within the generated message.
  type Position err
  -- | The representation of the file information.
  type Source err
  {-|
  Formats a position into the representation type given by 'Position'.
  -}
  pos :: Word         -- ^ the line the error occurred at.
      -> Word         -- ^ the column the error occurred at.
      -> Position err -- ^ a representation of the position.
  {-|
  Formats the name of the file parsed from, if it exists, into the type given by 'Source'.
  -}
  source :: Maybe FilePath -- ^ the source name of the file, if any.
         -> Source err

  -- | The representation type of the main body within the error message.
  type ErrorInfoLines err
  -- TODO:
  vanillaError :: UnexpectedLine err
               -> ExpectedLine err
               -> Messages err
               -> LineInfo err
               -> ErrorInfoLines err
  -- TODO:
  specialisedError :: Messages err
                   -> LineInfo err
                   -> ErrorInfoLines err

  -- | The representation of all the different possible tokens that could have prevented an error.
  type ExpectedItems err
  -- | The representation of the combined reasons or failure messages from the parser.
  type Messages err

  -- TODO:
  combineExpectedItems :: Set (Item err)
                       -> ExpectedItems err
  -- TODO:
  combineMessages :: [Message err]
                     -> Messages err

  -- | The representation of the information regarding the problematic token.
  type UnexpectedLine err
  -- | The representation of the information regarding the solving tokens.
  type ExpectedLine err
  -- | The representation of a reason or a message generated by the parser.
  type Message err
  -- | The representation of the line of input where the error occurred.
  type LineInfo err

  -- TODO:
  unexpected :: Maybe (Item err)
             -> UnexpectedLine err
  -- TODO:
  expected :: ExpectedItems err
           -> ExpectedLine err
  -- TODO:
  reason :: String
         -> Message err
  -- TODO:
  message :: String
          -> Message err

  -- TODO:
  lineInfo :: String
           -> [String]
           -> [String]
           -> Word
           -> Word
           -> LineInfo err

  -- TODO:
  numLinesBefore :: Int
  -- TODO:
  numLinesAfter :: Int

  -- | The type that represents the individual items within the error. It must be
  -- orderable, as it is used within @Set@.
  type Item err

  -- TODO:
  raw :: String
      -> Item err
  -- TODO:
  named :: String
        -> Item err
  -- TODO:
  endOfInput :: Item err

  -- TODO:
  unexpectedToken :: NonEmpty Char
                  -> Word
                  -> Bool
                  -> Token

instance ErrorBuilder String where
  {-# INLINE format #-}
  format = formatDefault

  type Position String = StringBuilder
  type Source String = Maybe StringBuilder

  {-# INLINE pos #-}
  pos = formatPosDefault
  {-# INLINE source #-}
  source = fmap fromString

  type ErrorInfoLines String = [StringBuilder]
  {-# INLINE vanillaError #-}
  vanillaError = vanillaErrorDefault
  {-# INLINE specialisedError #-}
  specialisedError = specialisedErrorDefault

  type ExpectedItems String = Maybe StringBuilder
  type Messages String = [StringBuilder]

  {-# INLINE combineExpectedItems #-}
  combineExpectedItems = disjunct True . Set.toList
  {-# INLINE combineMessages #-}
  combineMessages = combineMessagesDefault

  type UnexpectedLine String = Maybe StringBuilder
  type ExpectedLine String = Maybe StringBuilder
  type Message String = String
  type LineInfo String = [StringBuilder]

  {-# INLINE unexpected #-}
  unexpected = unexpectedDefault
  {-# INLINE expected #-}
  expected = expectedDefault
  {-# INLINE reason #-}
  reason = id
  {-# INLINE message #-}
  message = id

  {-# INLINE lineInfo #-}
  lineInfo = lineInfoDefault

  {-# INLINE numLinesBefore #-}
  numLinesBefore = 1
  {-# INLINE numLinesAfter #-}
  numLinesAfter = 1

  type Item String = String

  {-# INLINE raw #-}
  raw = rawDefault
  {-# INLINE named #-}
  named = namedDefault
  {-# INLINE endOfInput #-}
  endOfInput = endOfInputDefault

  {-# INLINABLE unexpectedToken #-}
  -- TillNextWhitespace with matches parser demand
  unexpectedToken ('\n' :| _) _ _ = Named "newline" 1
  unexpectedToken ('\r' :| _) _ _ = Named "carriage return" 1
  unexpectedToken ('\t' :| _) _ _ = Named "tab" 1
  unexpectedToken (' ' :| _) _ _ = Named "space" 1
  unexpectedToken (c :| cs) parserDemanded _
    | isSpace c = Named "whitespace character" 1
    | otherwise = case generalCategory c of
                    Format -> unprintable
                    Surrogate -> unprintable
                    PrivateUse -> unprintable
                    NotAssigned -> unprintable
                    Control -> unprintable
                    _ -> Raw (take (fromIntegral parserDemanded) (tillNextWhitespace (c:cs)))
    where unprintable = Named ("non-printable character (\\x" ++ showHex (ord c) ")") 1
          tillNextWhitespace = takeWhile (not . isSpace)
